{"ast":null,"code":"const calculatePrice = cart => cart.reduce((totalPrice, product) => {\n  return {\n    sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n    discount: Number(product.original_price) * Number(product.discount) * Number(product.qty) / 100 + Number(totalPrice.discount)\n  };\n}, {\n  sum: 0,\n  discount: 0\n});\n\nconst calculateFinalPrice = function (price) {\n  let deliveryCharges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return price.sum + deliveryCharges - price.discount;\n};\n\nconst calculateDeliveryCharges = totalPrice => totalPrice > 1900 ? 0 : 199;\n\nexport { calculatePrice, calculateDeliveryCharges, calculateFinalPrice };","map":{"version":3,"sources":["/Users/mukesh/Desktop/ecomm-react/src/Reducer/priceCalculation.jsx"],"names":["calculatePrice","cart","reduce","totalPrice","product","sum","Number","original_price","qty","discount","calculateFinalPrice","price","deliveryCharges","calculateDeliveryCharges"],"mappings":"AACA,MAAMA,cAAc,GAAIC,IAAD,IACvBA,IAAI,CAACC,MAAL,CAAY,CAACC,UAAD,EAAaC,OAAb,KAAyB;AACjC,SAAO;AACFC,IAAAA,GAAG,EAAEC,MAAM,CAACF,OAAO,CAACG,cAAT,CAAN,GAAiCD,MAAM,CAACF,OAAO,CAACI,GAAT,CAAvC,GAAuDF,MAAM,CAACH,UAAU,CAACE,GAAZ,CADhE;AAEFI,IAAAA,QAAQ,EAAGH,MAAM,CAACF,OAAO,CAACG,cAAT,CAAN,GAAiCD,MAAM,CAACF,OAAO,CAACK,QAAT,CAAxC,GAA8DH,MAAM,CAACF,OAAO,CAACI,GAAT,CAApE,GAAoF,GAApF,GAA0FF,MAAM,CAACH,UAAU,CAACM,QAAZ;AAFxG,GAAP;AAIH,CALD,EAKG;AAAEJ,EAAAA,GAAG,EAAE,CAAP;AAAUI,EAAAA,QAAQ,EAAE;AAApB,CALH,CADA;;AAQA,MAAMC,mBAAmB,GAAG,UAACC,KAAD,EAAgC;AAAA,MAAxBC,eAAwB,uEAAN,CAAM;AACxD,SAAOD,KAAK,CAACN,GAAN,GAAYO,eAAZ,GAA8BD,KAAK,CAACF,QAA3C;AACH,CAFD;;AAIA,MAAMI,wBAAwB,GAAIV,UAAD,IAAiBA,UAAU,GAAG,IAAb,GAAoB,CAApB,GAAwB,GAA1E;;AAEA,SAASH,cAAT,EAAyBa,wBAAzB,EAAmDH,mBAAnD","sourcesContent":["\nconst calculatePrice = (cart) =>\ncart.reduce((totalPrice, product) => {\n    return {\n         sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n         discount: (Number(product.original_price) * Number(product.discount)) * Number(product.qty) / 100 + Number(totalPrice.discount)\n    };\n}, { sum: 0, discount: 0 });\n\nconst calculateFinalPrice = (price, deliveryCharges = 0) => {\n    return price.sum + deliveryCharges - price.discount\n}\n\nconst calculateDeliveryCharges = (totalPrice) => (totalPrice > 1900 ? 0 : 199);\n\nexport { calculatePrice, calculateDeliveryCharges, calculateFinalPrice };"]},"metadata":{},"sourceType":"module"}