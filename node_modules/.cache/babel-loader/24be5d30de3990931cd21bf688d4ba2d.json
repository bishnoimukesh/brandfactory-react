{"ast":null,"code":"/**\n * \n * @param {array} cartItem array of cart object\n * @returns sum, discount price\n */\nconst calculatePrice = cartItem => cartItem.reduce((totalPrice, product) => {\n  return {\n    sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n    discount: Number(product.original_price) * Number(product.discount) * Number(product.qty) / 100 + Number(totalPrice.discount)\n  };\n}, {\n  sum: 0,\n  discount: 0\n});\n/**\n* \n* @param {object} price price object which has sum and discount\n* @param {number} deliveryCharges  \n* @returns final calculated price\n*/\n\n\nconst calculateFinalPrice = function (price) {\n  let deliveryCharges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return price.sum + deliveryCharges - price.discount;\n};\n/**\n* \n* @param {number} totalPrice \n* @returns delivery charge based on total price\n*/\n\n\nconst calculateDeliveryCharges = totalPrice => totalPrice > 200 ? 0 : 99;\n\nexport { calculatePrice, calculateFinalPrice, calculateDeliveryCharges };","map":{"version":3,"sources":["/Users/mukesh/Documents/GitHub/react/brand-factory-react/src/Reducer/priceCalculation.jsx"],"names":["calculatePrice","cartItem","reduce","totalPrice","product","sum","Number","original_price","qty","discount","calculateFinalPrice","price","deliveryCharges","calculateDeliveryCharges"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACC,MAAMA,cAAc,GAAIC,QAAD,IACvBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,UAAD,EAAaC,OAAb,KAAyB;AACrC,SAAO;AACHC,IAAAA,GAAG,EAAEC,MAAM,CAACF,OAAO,CAACG,cAAT,CAAN,GAAiCD,MAAM,CAACF,OAAO,CAACI,GAAT,CAAvC,GAAuDF,MAAM,CAACH,UAAU,CAACE,GAAZ,CAD/D;AAEHI,IAAAA,QAAQ,EAAGH,MAAM,CAACF,OAAO,CAACG,cAAT,CAAN,GAAiCD,MAAM,CAACF,OAAO,CAACK,QAAT,CAAxC,GAA8DH,MAAM,CAACF,OAAO,CAACI,GAAT,CAApE,GAAoF,GAApF,GAA0FF,MAAM,CAACH,UAAU,CAACM,QAAZ;AAFvG,GAAP;AAIH,CALD,EAKG;AAAEJ,EAAAA,GAAG,EAAE,CAAP;AAAUI,EAAAA,QAAQ,EAAE;AAApB,CALH,CADA;AAQD;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,mBAAmB,GAAG,UAACC,KAAD,EAAgC;AAAA,MAAxBC,eAAwB,uEAAN,CAAM;AAC3D,SAAOD,KAAK,CAACN,GAAN,GAAYO,eAAZ,GAA8BD,KAAK,CAACF,QAA3C;AACA,CAFD;AAGA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,wBAAwB,GAAIV,UAAD,IAAiBA,UAAU,GAAG,GAAb,GAAmB,CAAnB,GAAuB,EAAzE;;AAEA,SAASH,cAAT,EAAyBU,mBAAzB,EAA8CG,wBAA9C","sourcesContent":["/**\n * \n * @param {array} cartItem array of cart object\n * @returns sum, discount price\n */\n const calculatePrice = (cartItem) =>\n cartItem.reduce((totalPrice, product) => {\n     return {\n         sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n         discount: (Number(product.original_price) * Number(product.discount)) * Number(product.qty) / 100 + Number(totalPrice.discount)\n     };\n }, { sum: 0, discount: 0 });\n\n/**\n* \n* @param {object} price price object which has sum and discount\n* @param {number} deliveryCharges  \n* @returns final calculated price\n*/\nconst calculateFinalPrice = (price, deliveryCharges = 0) => {\n return price.sum + deliveryCharges - price.discount\n}\n/**\n* \n* @param {number} totalPrice \n* @returns delivery charge based on total price\n*/\nconst calculateDeliveryCharges = (totalPrice) => (totalPrice > 200 ? 0 : 99);\n\nexport { calculatePrice, calculateFinalPrice, calculateDeliveryCharges }"]},"metadata":{},"sourceType":"module"}