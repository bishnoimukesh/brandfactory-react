{"ast":null,"code":"const finalPrice = cart => cart.reduce((totalPrice, product) => {\n  console.log(totalPrice, product);\n  return {\n    sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n    discount: Number(product.original_price) * Number(product.discount) * Number(product.qty) / 100 + Number(totalPrice.discount)\n  };\n}, {\n  sum: 0,\n  discount: 0\n});\n\nconst calculateFinalPrice = function (price) {\n  let deliveryCharges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return price.sum + deliveryCharges - price.discount;\n};\n\nconst calculateDeliveryCharges = totalPrice => totalPrice > 200 ? 0 : 99;\n\nexport { finalPrice, calculateFinalPrice, calculateDeliveryCharges };","map":{"version":3,"sources":["/Users/mukesh/Documents/GitHub/react/brand-factory-react/src/Reducer/priceCalculation.jsx"],"names":["finalPrice","cart","reduce","totalPrice","product","console","log","sum","Number","original_price","qty","discount","calculateFinalPrice","price","deliveryCharges","calculateDeliveryCharges"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,IAAD,IAEnBA,IAAI,CAACC,MAAL,CAAY,CAACC,UAAD,EAAaC,OAAb,KAAyB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAwBC,OAAxB;AACA,SAAO;AACFG,IAAAA,GAAG,EAAEC,MAAM,CAACJ,OAAO,CAACK,cAAT,CAAN,GAAiCD,MAAM,CAACJ,OAAO,CAACM,GAAT,CAAvC,GAAuDF,MAAM,CAACL,UAAU,CAACI,GAAZ,CADhE;AAEFI,IAAAA,QAAQ,EAAGH,MAAM,CAACJ,OAAO,CAACK,cAAT,CAAN,GAAiCD,MAAM,CAACJ,OAAO,CAACO,QAAT,CAAxC,GAA8DH,MAAM,CAACJ,OAAO,CAACM,GAAT,CAApE,GAAoF,GAApF,GAA0FF,MAAM,CAACL,UAAU,CAACQ,QAAZ;AAFxG,GAAP;AAIH,CAND,EAMG;AAAEJ,EAAAA,GAAG,EAAE,CAAP;AAAUI,EAAAA,QAAQ,EAAE;AAApB,CANH,CAFA;;AAUA,MAAMC,mBAAmB,GAAG,UAACC,KAAD,EAAgC;AAAA,MAAxBC,eAAwB,uEAAN,CAAM;AACxD,SAAOD,KAAK,CAACN,GAAN,GAAYO,eAAZ,GAA8BD,KAAK,CAACF,QAA3C;AACH,CAFD;;AAIA,MAAMI,wBAAwB,GAAIZ,UAAD,IAAiBA,UAAU,GAAG,GAAb,GAAmB,CAAnB,GAAuB,EAAzE;;AAEA,SAASH,UAAT,EAAqBY,mBAArB,EAA0CG,wBAA1C","sourcesContent":["const finalPrice = (cart) =>\n\ncart.reduce((totalPrice, product) => {\n    console.log(totalPrice, product);\n    return {\n         sum: Number(product.original_price) * Number(product.qty) + Number(totalPrice.sum),\n         discount: (Number(product.original_price) * Number(product.discount)) * Number(product.qty) / 100 + Number(totalPrice.discount)\n    };\n}, { sum: 0, discount: 0 });\n\nconst calculateFinalPrice = (price, deliveryCharges = 0) => {\n    return price.sum + deliveryCharges - price.discount\n}\n\nconst calculateDeliveryCharges = (totalPrice) => (totalPrice > 200 ? 0 : 99);\n\nexport { finalPrice, calculateFinalPrice, calculateDeliveryCharges }"]},"metadata":{},"sourceType":"module"}